/*
 * ==========================================
 * |          GENERATED BY SUPAZOD          |
 * ==========================================
 */

import { z } from 'zod';
import { Json } from './types';

export const publicDaytypeSchema = z.union([z.literal('RestDay'), z.literal('TrainingDay')]);

export const publicExperiencelevelSchema = z.union([
	z.literal('Beginner'),
	z.literal('Intermediate'),
	z.literal('Advanced')
]);

export const publicHappinessSchema = z.union([
	z.literal('angry'),
	z.literal('frown'),
	z.literal('meh'),
	z.literal('smile'),
	z.literal('laugh')
]);

export const publicUnitSchema = z.union([z.literal('kgs'), z.literal('lbs')]);

export const jsonSchema: z.ZodSchema<Json> = z.lazy(() =>
	z
		.union([
			z.string(),
			z.number(),
			z.boolean(),
			z.record(z.union([jsonSchema, z.undefined()])),
			z.array(jsonSchema)
		])
		.nullable()
);

export const publicClientInvitesRowSchemaSchema = z.object({
	coach_id: z.string(),
	code: z.string(),
	email: z.string(),
	first_name: z.string(),
	id: z.string(),
	invite_complete: z.boolean(),
	last_name: z.string()
});

export const publicClientInvitesInsertSchemaSchema = z.object({
	coach_id: z.string(),
	code: z.string().optional(),
	email: z.string().optional(),
	first_name: z.string().optional(),
	id: z.string().optional(),
	invite_complete: z.boolean().optional(),
	last_name: z.string().optional()
});

export const publicClientInvitesUpdateSchemaSchema = z.object({
	coach_id: z.string().optional(),
	code: z.string().optional(),
	email: z.string().optional(),
	first_name: z.string().optional(),
	id: z.string().optional(),
	invite_complete: z.boolean().optional(),
	last_name: z.string().optional()
});

export const publicClientInvitesRelationshipsSchemaSchema = z.tuple([
	z.object({
		foreignKeyName: z.literal('client_invites_coach_id_fkey'),
		columns: z.tuple([z.literal('coach_id')]),
		isOneToOne: z.literal(false),
		referencedRelation: z.literal('coaches'),
		referencedColumns: z.tuple([z.literal('id')])
	})
]);

export const publicCoachesRowSchemaSchema = z.object({
	accessed_alpha_already: z.boolean(),
	alpha_key: z.number(),
	avatar_url: z.string().nullable(),
	company_name: z.string().nullable(),
	full_name: z.string().nullable(),
	id: z.string(),
	website: z.string().nullable()
});

export const publicCoachesInsertSchemaSchema = z.object({
	accessed_alpha_already: z.boolean().optional(),
	alpha_key: z.number().optional(),
	avatar_url: z.string().optional().nullable(),
	company_name: z.string().optional().nullable(),
	full_name: z.string().optional().nullable(),
	id: z.string(),
	website: z.string().optional().nullable()
});

export const publicCoachesUpdateSchemaSchema = z.object({
	accessed_alpha_already: z.boolean().optional(),
	alpha_key: z.number().optional(),
	avatar_url: z.string().optional().nullable(),
	company_name: z.string().optional().nullable(),
	full_name: z.string().optional().nullable(),
	id: z.string().optional(),
	website: z.string().optional().nullable()
});

export const publicCoachesRelationshipsSchemaSchema = z.tuple([]);

export const publicDaysRowSchemaSchema = z.object({
	id: z.string(),
	order: z.number(),
	program_id: z.string()
});

export const publicDaysInsertSchemaSchema = z.object({
	id: z.string().optional(),
	order: z.number().optional(),
	program_id: z.string()
});

export const publicDaysUpdateSchemaSchema = z.object({
	id: z.string().optional(),
	order: z.number().optional(),
	program_id: z.string().optional()
});

export const publicDaysRelationshipsSchemaSchema = z.tuple([
	z.object({
		foreignKeyName: z.literal('days_program_id_fkey'),
		columns: z.tuple([z.literal('program_id')]),
		isOneToOne: z.literal(false),
		referencedRelation: z.literal('programs'),
		referencedColumns: z.tuple([z.literal('id')])
	})
]);

export const publicMuscleGroupSchema = z.union([
	z.literal('Biceps'),
	z.literal('Triceps'),
	z.literal('Forearm Flexors'),
	z.literal('Forearm Extensors'),
	z.literal('Side Delts'),
	z.literal('Front Delts'),
	z.literal('Rear Delts'),
	z.literal('Chest'),
	z.literal('Traps & Rhomboids'),
	z.literal('Lats'),
	z.literal('Abs'),
	z.literal('Glutes'),
	z.literal('Hamstrings'),
	z.literal('Quads'),
	z.literal('Adductors'),
	z.literal('Calves')
]);

export const publicExercisesInsertSchemaSchema = z.object({
	coach_id: z.string().optional().nullable(),
	created_at: z.string().optional(),
	id: z.string().optional(),
	instructions: z.array(z.string()),
	movement_type: z.string().optional(),
	muscle_groups: z.array(publicMuscleGroupSchema),
	name: z.string().optional(),
	note: z.string().optional(),
	updated_at: z.string().optional(),
	video: z.string().optional()
});

export const publicExercisesUpdateSchemaSchema = z.object({
	coach_id: z.string().optional().nullable(),
	created_at: z.string().optional(),
	id: z.string().optional(),
	instructions: z.array(z.string()).optional(),
	movement_type: z.string().optional(),
	muscle_groups: z.array(publicMuscleGroupSchema).optional(),
	name: z.string().optional(),
	note: z.string().optional(),
	updated_at: z.string().optional(),
	video: z.string().optional()
});

export const publicExercisesRelationshipsSchemaSchema = z.tuple([
	z.object({
		foreignKeyName: z.literal('public_exercises_userId_fkey'),
		columns: z.tuple([z.literal('coach_id')]),
		isOneToOne: z.literal(false),
		referencedRelation: z.literal('coaches'),
		referencedColumns: z.tuple([z.literal('id')])
	})
]);

export const publicLibraryWorkoutsRowSchemaSchema = z.object({
	coach_id: z.string(),
	id: z.string(),
	name: z.string()
});

export const publicLibraryWorkoutsInsertSchemaSchema = z.object({
	coach_id: z.string().optional(),
	id: z.string().optional(),
	name: z.string().optional()
});

export const publicLibraryWorkoutsUpdateSchemaSchema = z.object({
	coach_id: z.string().optional(),
	id: z.string().optional(),
	name: z.string().optional()
});

export const publicLibraryWorkoutsRelationshipsSchemaSchema = z.tuple([
	z.object({
		foreignKeyName: z.literal('library_workouts_coach_id_fkey'),
		columns: z.tuple([z.literal('coach_id')]),
		isOneToOne: z.literal(false),
		referencedRelation: z.literal('coaches'),
		referencedColumns: z.tuple([z.literal('id')])
	})
]);

export const publicModalitySchema = z.union([
	z.literal('Hypertrophy'),
	z.literal('Strength'),
	z.literal('Powerbuilding'),
	z.literal('Sport-Specific'),
	z.literal('Power'),
	z.literal('Cardiovascular'),
	z.literal('Flexibility')
]);

export const publicProgramsInsertSchemaSchema = z.object({
	experience_level: publicExperiencelevelSchema.optional(),
	id: z.string().optional(),
	modality: publicModalitySchema.optional(),
	name: z.string().optional(),
	split_length: z.number().optional(),
	user_id: z.string().optional()
});

export const publicProgramsUpdateSchemaSchema = z.object({
	experience_level: publicExperiencelevelSchema.optional(),
	id: z.string().optional(),
	modality: publicModalitySchema.optional(),
	name: z.string().optional(),
	split_length: z.number().optional(),
	user_id: z.string().optional()
});

export const publicProgramsRelationshipsSchemaSchema = z.tuple([
	z.object({
		foreignKeyName: z.literal('public_programs_userId_fkey'),
		columns: z.tuple([z.literal('user_id')]),
		isOneToOne: z.literal(false),
		referencedRelation: z.literal('coaches'),
		referencedColumns: z.tuple([z.literal('id')])
	})
]);

export const publicWorkoutInstancesRowSchemaSchema = z.object({
	day_id: z.string(),
	id: z.string()
});

export const publicWorkoutInstancesInsertSchemaSchema = z.object({
	day_id: z.string(),
	id: z.string().optional()
});

export const publicWorkoutInstancesUpdateSchemaSchema = z.object({
	day_id: z.string().optional(),
	id: z.string().optional()
});

export const publicWorkoutInstancesRelationshipsSchemaSchema = z.tuple([
	z.object({
		foreignKeyName: z.literal('workout_instances_day_id_fkey'),
		columns: z.tuple([z.literal('day_id')]),
		isOneToOne: z.literal(false),
		referencedRelation: z.literal('days'),
		referencedColumns: z.tuple([z.literal('id')])
	})
]);

export const publicClientGoalSchema = z.union([
	z.literal('Muscle Gain'),
	z.literal('Fat Loss'),
	z.literal('Body Recomposition'),
	z.literal('Strength Gain'),
	z.literal('Maintenance'),
	z.literal('Endurance'),
	z.literal('Speed'),
	z.literal('Sport'),
	z.literal('Other')
]);

export const publicDefaultTrackingFieldSchema = z.union([
	z.literal('weight'),
	z.literal('reps'),
	z.literal('rir'),
	z.literal('rest'),
	z.literal('distance'),
	z.literal('pace'),
	z.literal('%1rm'),
	z.literal('%hr')
]);

export const publicEquipmentSchema = z.union([
	z.literal('Dumbbell'),
	z.literal('Barbell'),
	z.literal('Pin Machine'),
	z.literal('Plate Machine'),
	z.literal('Smith Machine'),
	z.literal('Cable')
]);

export const publicVariationSchema = z.union([
	z.literal('Standing'),
	z.literal('Seated'),
	z.literal('Lying (Face-Up)'),
	z.literal('Lying (Face-Down)'),
	z.literal('Incline'),
	z.literal('Decline'),
	z.literal('Kneeling'),
	z.literal('Split-Stance'),
	z.literal('Side-Lying'),
	z.literal('Wall-Supported'),
	z.literal('Hanging'),
	z.literal('Plank-Position'),
	z.literal('Bent-Over'),
	z.literal('Chest-Supported'),
	z.literal('Forward-Leaning')
]);

export const publicExercisesRowSchemaSchema = z.object({
	coach_id: z.string().nullable(),
	created_at: z.string(),
	id: z.string(),
	instructions: z.array(z.string()),
	movement_type: z.string(),
	muscle_groups: z.array(publicMuscleGroupSchema),
	name: z.string(),
	note: z.string(),
	updated_at: z.string(),
	video: z.string()
});

export const publicProgramsRowSchemaSchema = z.object({
	experience_level: publicExperiencelevelSchema,
	id: z.string(),
	modality: publicModalitySchema,
	name: z.string(),
	split_length: z.number(),
	user_id: z.string()
});
